package com.sana.circleup.room_db_implement;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.Entity;
import androidx.room.PrimaryKey;
import androidx.room.ColumnInfo; // Added

// Define the table name for this entity
//@Entity(tableName = "chat_list_table")
@Entity(tableName = "chat_list_table", primaryKeys = {"ownerUserId", "userId"})
public class ChatEntity {

    // --- Primary Key ---
    // This will be automatically generated by Room
//    @PrimaryKey(autoGenerate = true)
    private long id; // <-- Add this primary key field

    // --- Foreign Key / Owner Information ---
    // The ID of the user whose chat list this entry belongs to
    @ColumnInfo(name = "ownerUserId") // Use ColumnInfo for explicit column name if needed
    @NonNull // Assuming ownerUserId cannot be null
    private String ownerUserId; // <-- Keep this field

    private String firebaseMessageId;

    // --- Chat Partner Information ---
    // The ID of the other user in this 1-on-1 chat
    @ColumnInfo(name = "userId")
    @NonNull // Assuming userId cannot be null
    private String userId; // <-- Keep this field
    private boolean partnerKeysChanged; // <-- NEW field

    @ColumnInfo(name = "username")
    private String username; // <-- Keep this field

    @ColumnInfo(name = "profileImage")
    private String profileImage; // <-- Keep this field (Base64 string)

    // --- Conversation Information ---
    // A unique, consistent ID for the conversation between ownerUserId and userId
    @ColumnInfo(name = "conversationId")
    @NonNull // Assuming conversationId cannot be null
    private String conversationId; // <-- Keep this field
    @Nullable
    private String lastMessageSenderId;


    // --- Last Message Information (for chat preview) ---
    @ColumnInfo(name = "lastMessage")
    private String lastMessage; // <-- Keep this field (will store ENCRYPTED preview)

    @ColumnInfo(name = "timestamp")
    private long timestamp; // <-- Keep this field (Timestamp of the last message for sorting)

    @ColumnInfo(name = "unreadCount")
    private int unreadCount; // <-- Keep this field (Unread count for the ownerUserId)

    @ColumnInfo(name = "lastMessageType")
    private String lastMessageType; // <-- Keep this field (e.g., "text", "image", "file")

    // Optional: Add lastMessageSenderId if you need it in the preview
    // @ColumnInfo(name = "lastMessageSenderId")
    // private String lastMessageSenderId;


    // --- Constructor (Room needs an empty public constructor) ---
    public ChatEntity() {
    }

    // --- Getters and Setters (REQUIRED for Room) ---

    // Getters and setters for the new 'id' field
    public long getId() { // <-- Add this getter
        return id;
    }

    public void setId(long id) { // <-- Add this setter
        this.id = id;
    }

    // Getters and setters for existing fields (ensure these exist and match your fields)
    @NonNull
    public String getOwnerUserId() {
        return ownerUserId;
    }

    public void setOwnerUserId(@NonNull String ownerUserId) {
        this.ownerUserId = ownerUserId;
    }

    @NonNull
    public String getUserId() {
        return userId;
    }

    public void setUserId(@NonNull String userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getProfileImage() {
        return profileImage;
    }

    public void setProfileImage(String profileImage) {
        this.profileImage = profileImage;
    }

    @NonNull
    public String getConversationId() {
        return conversationId;
    }

    public void setConversationId(@NonNull String conversationId) {
        this.conversationId = conversationId;
    }

    public String getLastMessage() {
        return lastMessage;
    }

    public void setLastMessage(String lastMessage) {
        this.lastMessage = lastMessage;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    public int getUnreadCount() {
        return unreadCount;
    }

    public void setUnreadCount(int unreadCount) {
        this.unreadCount = unreadCount;
    }

    public String getLastMessageType() {
        return lastMessageType;
    }
    public boolean isPartnerKeysChanged() { // <-- NEW getter
        return partnerKeysChanged;
    }

    public void setPartnerKeysChanged(boolean partnerKeysChanged) { // <-- NEW setter
        this.partnerKeysChanged = partnerKeysChanged;
    }


    public void setLastMessageType(String lastMessageType) {
        this.lastMessageType = lastMessageType;
    }

    public String getMessageType() {
        return lastMessageType;
    }

    public String getFirebaseMessageId() {
        return firebaseMessageId;

    }

    public void setFirebaseMessageId(String firebaseMessageId) {
        this.firebaseMessageId = firebaseMessageId;
    }

    // --- ADD GETTER AND SETTER FOR NEW FIELD ---
    @Nullable
    public String getLastMessageSenderId() {
        return lastMessageSenderId;
    }

    public void setLastMessageSenderId(@Nullable String lastMessageSenderId) {
        this.lastMessageSenderId = lastMessageSenderId;
    }

    // Add getter/setter for lastMessageSenderId if you add the field
    // public String getLastMessageSenderId() { return lastMessageSenderId; }
    // public void setLastMessageSenderId(String lastMessageSenderId) { this.lastMessageSenderId = lastMessageSenderId; }
}


